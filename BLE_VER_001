#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <arpa/inet.h>

///ashley

#define APPLE_MANUFACTURER_ID 0x004C  // Apple Inc.

void packet_handler(unsigned char* user, const struct pcap_pkthdr* header, const unsigned char* packetData) {
    if (header->caplen < 14) return; // Ensure packet is long enough
    
    char mac_addr[18];
    snprintf(mac_addr, sizeof(mac_addr), "%02X:%02X:%02X:%02X:%02X:%02X",
        packetData[6], packetData[7], packetData[8],
        packetData[9], packetData[10], packetData[11]);  // BLE MAC address (advertiser)

    // Get the current timestamp
    time_t now = time(NULL);
    struct tm *timeinfo = localtime(&now);
    char timestamp[20];
    strftime(timestamp, sizeof(timestamp), "%Y-%m-%d %H:%M:%S", timeinfo);

    // Check for Apple Manufacturer ID in the advertisement
    for (int i = 12; i < header->caplen - 1; i++) {
        if (packetData[i] == 0x4C && packetData[i+1] == 0x00) {  // Apple ID (0x004C) in Little Endian
            printf("[%s] [APPLE DEVICE] MAC: %s | Packet Size: %d\n", timestamp, mac_addr, header->caplen);
            return;
        }
    }
}

int start_packet_capture() {
    char* dev = "hci0";  // Use Bluetooth adapter interface
    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_t* handle;

    // Open the BLE interface for packet capture
    handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open device %s: %s\n", dev, errbuf);
        return 2;
    }

    // Apply a filter for BLE advertisement packets
    struct bpf_program compiled_filter;
    char filter_name[] = "bluetooth and link-type 1";  // Capture only BLE advertisements

    if (pcap_compile(handle, &compiled_filter, filter_name, 0, PCAP_NETMASK_UNKNOWN) == -1) {
        fprintf(stderr, "Couldn't parse filter %s: %s\n", filter_name, pcap_geterr(handle));
        return 2;
    }
    if (pcap_setfilter(handle, &compiled_filter) == -1) {
        fprintf(stderr, "Couldn't install filter %s: %s\n", filter_name, pcap_geterr(handle));
        return 2;
    }

    // Start capturing packets
    printf("Scanning for Apple BLE devices...\n");
    pcap_loop(handle, 0, packet_handler, NULL);

    // Close the handle
    pcap_close(handle);
    return 0;
}

int main() {
    return start_packet_capture();
}

//running the code
//sudo hciconfig hci0 down
//sudo hciconfig hci0 monitor

//compile and run
//gcc ble_apple_sniffer.c -o ble_apple_sniffer -lpcap
//sudo ./ble_apple_sniffer


//expected output
//[2025-02-18 14:32:01] [APPLE DEVICE] MAC: F0:99:BF:1C:45:78 | Packet Size: 37
//[2025-02-18 14:32:05] [APPLE DEVICE] MAC: E8:6F:38:AA:3B:10 | Packet Size: 42
